/* eslint-disable react-refresh/only-export-components */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-empty-function */
import {useEffect, useState, createContext, ReactNode, useContext} from "react";
import {ethers} from "ethers";
import lighthouse from "@lighthouse-web3/sdk";

import abi from "../lib/abi";
import {toast} from "sonner";

declare global {
  interface Window {
    ethereum: any;
  }
}

export const VoterContext = createContext<{
  switchNetwork: (chainId: string) => Promise<void>;
  connectWallet: () => void;
  contractAddress: string;
  contract: any;
  chainId: string;
  currentAccount: string;
  accessControl: (cid: string) => Promise<void>;
}>({
  switchNetwork: () => new Promise(() => {}),
  connectWallet: () => {},
  contractAddress: "",
  contract: null,
  chainId: "",
  currentAccount: "",
  accessControl: () => new Promise(() => {}),
});

export const ContractContextProvider = ({children}: {children: ReactNode}) => {
  const [chainId, setChainId] = useState("");

  const [currentAccount, setCurrentAccount] = useState("");
  const [contract, setContract] = useState<any>(null);

  const contractAddress = "0xBF9743CC2Ee28722242c85D11E3407A9d2E974b8";
  const contractABI = abi;
  const ethereum = window?.ethereum;

  useEffect(() => {
    const getContract = () => {
      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();
      const loomHubContract = new ethers.Contract(
        contractAddress,
        contractABI,
        signer
      );

      setContract(loomHubContract);
    };
    if (ethereum) getContract();
  }, [ethereum, contractABI]);

  useEffect(() => {
    if (ethereum) {
      ethereum.on("accountsChanged", (accounts: any) => {
        setCurrentAccount(accounts[0]);
      });
    } else console.log("No metamask!");

    return () => {
      // ethereum.removeListener('accountsChanged');
    };
  }, [ethereum]);

  // Reload the page when they change networks
  function handleChainChanged() {
    window.location.reload();
  }

  useEffect(() => {
    const checkIfWalletIsConnected = async () => {
      try {
        if (!ethereum) {
          console.log("Metamask not found");
          return;
        } else console.log("we have etherium object");

        const accounts = await ethereum.request({method: "eth_accounts"}); //check if there are accounts connected to the site

        if (accounts.length !== 0) {
          const account = accounts[0];
          console.log("Found an authorized account:", account);
          // if (currentAccount !== "")
          setCurrentAccount(account);

          // votingSystem();
        } else {
          setCurrentAccount("");
          console.log("No authorized accounts found!");
        }

        const curr_chainId = await ethereum.request({method: "eth_chainId"});
        setChainId(curr_chainId);

        ethereum.on("chainChanged", handleChainChanged);
      } catch (error: any) {
        console.log(error);
        toast(`Error: ${error.message}`);
      }
    };

    checkIfWalletIsConnected();
  }, [currentAccount, contractABI, ethereum]);

  const connectWallet = async () => {
    try {
      if (!ethereum) {
        alert("Get MetaMask!");
        return;
      }

      const accounts = await ethereum.request({method: "eth_requestAccounts"}); // request connection with accounts
      // console.log("Connected", accounts[0]);
      setCurrentAccount(accounts[0]);
      // const chainId = await ethereum.request({ method: 'eth_chainId' });
    } catch (e: any) {
      console.log(e);
      toast(`Error: ${e.message}`);
    }
  };

  const switchNetwork = async (chainId: string) => {
    try {
      await window.ethereum.request({
        method: "wallet_switchEthereumChain",
        params: [{chainId: chainId}], // Check networks.js for hexadecimal network ids
      });
    } catch (error: any) {
      console.log(error);
      toast(`Error: ${error.message}`);
    }
  };

  //   useEffect(() => {
  //     if (chainId !== "0x13881" || !currentAccount) {
  //       switchNetwork();
  //     }
  //   }, [chainId, currentAccount]);

  // Function to sign authentication message
  const signAuthMessage = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();
      const messageRequested =
        (await lighthouse.getAuthMessage(currentAccount)).data.message || "";
      const signedMessage = await signer.signMessage(messageRequested);
      return signedMessage;
    } catch (err: any) {
      console.log(err);
      toast(`Error: ${err.message}`);
    }
  };

  // Apply access control conditions
  const accessControl = async (cid: string) => {
    // CID generated by uploading a file with encryption
    try {
      console.log("accessControl", cid);
      const publicKey = currentAccount;

      const conditions = [
        {
          id: 1,
          chain: "Sepolia",
          method: "getId",
          standardContractType: "Custom",
          contractAddress: "0xE8f88154a2DC1Cf168Aa76B88B3cee203908d2D0",
          returnValueTest: {
            comparator: "==",
            value: true,
          },
          // parameters: [],
          inputArrayType: ["uint256"],
          outputType: "bool",
        },
      ];
      const aggregator = "([1])";

      const signedMessage = await signAuthMessage();

      const response = await lighthouse.applyAccessCondition(
        publicKey,
        cid,
        signedMessage as string,
        conditions,
        aggregator
      );

      console.log(response);
    } catch (error: any) {
      console.log(error, "context");
      toast(`Error: ${error.message}`);
    }
  };

  return (
    <VoterContext.Provider
      value={{
        chainId,
        switchNetwork,
        connectWallet,
        contractAddress,
        contract,
        currentAccount,
        accessControl,
      }}
    >
      {children}
    </VoterContext.Provider>
  );
};

export const useContractHook = () => {
  return useContext(VoterContext);
};
